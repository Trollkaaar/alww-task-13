use crate::utilities::vector3::{traits::Vector, vector::Vec3};

use super::{hittable_list::Hittable_objects_list, traits::Hittable};

pub struct Sphere {
    center: Vec3,
    radius: f32,
}

impl Sphere {
    pub fn new(center: Vec3, radius: f32) -> Sphere {
        Sphere { center, radius }
    }
}

impl Hittable for Sphere {
    fn hit(
        &self,
        r: &crate::utilities::rays::ray::Ray,
        t_min: f32,
        t_max: f32,
        rec: &mut super::hitRecord::Hit_record,
    ) -> bool {
        let oc: Vec3 = r.origin - self.center;
        let a = r.direction.magnitude_squared();
        let b = oc.dot(&r.direction);
        let c = oc.magnitude_squared() - self.radius.powi(2);

        let discriminant = b.powi(2) - a * c;
        if (discriminant < 0.0) {
            return false;
        }
        let sqrtd = discriminant.sqrt();

        let mut root = (-b - sqrtd) / a;
        if (root < t_min || t_max < root) {
            root = (-b + sqrtd) / a;
            if (root < t_min || t_max < root) {
                return false;
            }
        }

        rec.t = root;
        rec.p = r.at(rec.t);
        rec.set_face_normal(r, (rec.p - self.center) / self.radius);

        return true;
    }
}
